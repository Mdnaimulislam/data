# This workflow will automatically assign issues and pull requests to the "To Do" and "In Progress" columns of the default project. Additionally, it will move issues from the "To Do" column to the "In Progress" column based on changes in their labels.
# https://github.com/actions/add-to-project

name: assign-project

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, labeled]

env:
  GITHUB_TOKEN: ${{ secrets.ACTIONS_DEPLOY_KEY }}

jobs:
  add-issue-to-project:
    name: Assign NEW issue to project with "To do" status
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Assign issue to To do column
        uses: srggrs/assign-one-project-github-action@1.2.1
        with:
          project: https://github.com/orgs/pykale/projects/4
          column_name: To do

  add-pull-request-to-project:
    name: Assign NEW pull request to project with "In progress" status
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Assign PR to In progress column
        uses: srggrs/assign-one-project-github-action@1.2.1
        with:
          project: https://github.com/orgs/pykale/projects/4
          column_name: In progress

  move-issue-to-in-progress:
    name: Move issue to "In progress" column when "work-in-progress" label is assigned
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'work-in-progress')
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to In progress column
        uses: actions/github-script@v5
        with:
          script: |
            const { repo, payload } = context;
            const projectId = 4;
            const columnName = "In progress";
            const issueId = payload.issue.node_id;
            // Get the project
            const project = await github.request("GET /projects/{project_id}", {
              project_id: projectId,
              headers: {
                "Accept": "application/vnd.github+json",
                "Authorization": `token ${process.env.ACTIONS_DEPLOY_KEY}`
              }
            });
            // Get project columns
            const columns = await github.projects.listColumns({
              project_id: projectId,
            });
            // Find the "In progress" column
            const inProgressColumn = columns.data.find(column => column.name === columnName);
            if (!inProgressColumn) {
              throw new Error(`Column "${columnName}" not found in project "${project.data.name}"`);
            }
            // Move the issue to the "In progress" column
            await github.projects.moveCard({
              card_id: issueId,
              column_id: inProgressColumn.id,
              position: "top",
            });
